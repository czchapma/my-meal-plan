Class ML_Client

Fields:
	users: A hashmap from userIds to the corresponding User_Reviews instance.
	dists: A hashmap from userIds to hashmaps of userIds to distances. This is it keeps track of which users are closest to each other.
	foods: an arraylist of all the foods available to review.

Constructor: 
	public ML_Client(ArrayList<String> f)
		Makes a ML_Client with empty users and dists, with the given food list f.

Methods:
	public void addUser(User_Reviews newUser):
	This method adds a new User_Reviews instance to the ML_Client, and updates the distances accordingly.

	update methods (see code for details), each update method allows you to make changes to a user given by curId, and keeps track of the dist changes:

	public void updateUserName(int curId, String newName)
	public void updateIdentity(int curId, int genderId)
	public void updateIdDescription(int curId, String genderDescription)
	public void updateBirthYear(int curId, int birthYear)
	public void updateBirthMonth(int curId, int birthMonth)
	public void updateReview(int curId, String food, int review)

	ML methods:

	public double getReviewGuess(String food, int k, int curId)
		This method returns the best guess for what user signified by curId would rank food using modified knn with k. If there isn't enough data, this will return -1.

	public String[] getRec(int curId, int k, int numWanted)
		This method returns recommendations for foods the user hasn't tried, using the best guesses calculated by knn. It will return numWanted recommendations using knn with k for user signified by curId. If there isn't enough info, the array will have nulls instead.

Usage Instructions:

	To set up the recommendations, start by building a new instance of ML_Client, and giving it the foods list you have on file. Eventually we'll have to write in a way to make that list grow or shrink, but for now we'll keep it constant for testing. 

	Whenever a new user is created, a unique UserId should be created on the server end, and then on the server end you should build a User_Reviews instance with that and all the info you currently have. Info on how to do that is in the User_Reviews docs.

	Whenever a user changes data, the server should call one of the update methods above. That'll keep the dists matrix updated.

	Whenever a user asks for recommendations, the server should call getRec. We'll have to pick a k (something odd and less than like 10 is probably the best? But we can see in testing). 

	Whenever a user views a particular item, the server should call getReviewGuess, and if it isn't -1, it should tell the user our guess. If it is -1 it should either not say anything or tell them that there isn't enough info for this item yet, and they should review it if they've had it.

	The only time you should ever deal with User_Reviews items is when building a new user. Otherwise everything should be done with userIds and the update stuff above.  
	
	
	
